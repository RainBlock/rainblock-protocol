syntax = "proto3";

// Protobuf definitions for verifier <--> storage communication
package rainblock;

import "google/protobuf/empty.proto";

service VerifierStorage {
  // Updates the storage node with a new block given,
  // the merkle_tree_nodes, an rlp serialization of the new block and the
  // state operations corresponding to the new block
  rpc Update(UpdateMsg) returns (google.protobuf.Empty);
}

// UpdateMsg contains the information required to update the 
// storage node with a new block.
message UpdateMsg {
  // RLP encoded list of RLP serialized nodes in the initial layers of the 
  // global state trie required to verify the sharded state in the storage nodes
  bytes merkle_tree_nodes = 1;
  // RLP serialization of the new block
  bytes rlp_block = 2;
  // A list of state update operations for the new block.
  repeated UpdateOp operations = 3;
}

// Used for each update to the node's merkle tree.
message UpdateOp {
  bytes account = 1; // 20 bytes, BE account number
  bytes balance = 2; //  32 bytes, BE new balance. May not be present if the balance is unchanged.
  uint64 nonce = 3; //  New nonce. May not be present if the nonce is unchanged.
  repeated StorageUpdate storage_update = 4; // Storage updates, if any.
  bytes code = 5; // Code bytes, only applicable for creation of a contract account.
  bool deleted = 6; // Set if the account was deleted. All other fields, if present, are ignored.
}

// StorageUpdate op to update a global state account's internal storgage
message StorageUpdate {
  bytes key = 1; // 32 byte big endian unsigned integer
  // New or updated value of the storage entry
  bytes value = 2; // 32 byte big endian unsigned integer, or 0 if the key was deleted.
}
