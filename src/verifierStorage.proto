syntax = "proto3";

// Protobuf definitions for verifier <--> storage communication
package rainblock;

import "clientStorage.proto";
import "google/protobuf/empty.proto";

service VerifierStorage {
  // Update rpc updates the storage node with the new block,
  // given the merkle_tree_nodes, an rlp serialization of the new block and the
  // state operations corresponding to the new block
  rpc Update(UpdateMsg) returns (google.protobuf.Empty);
}

// UpdateMsg contains the information required to update the 
// storage node with a new block.
// merkle_tree_nodes : List of RLP encoded nodes in the initial layers of the 
//                     global state trie required to verify the
//                     sharded state in the storage nodes
// rlp_block         : RLP serialization of the new block
// operations        : A list of state update operations for the new block
message UpdateMsg {
  repeated rainblock.MerklePatriciaTreeNode merkle_tree_nodes = 1;
  bytes rlp_block = 2;
  repeated UpdateOp operations = 3;
}

// UpdateOp to update the state in the storage nodes
// updates   : A state update operation can be either an ValueChangeOp,
//             DeletionOp, CreationOP or an ExecutionOp
message UpdateOp {
  oneof updates {
    ValueChangeOp value = 1;
    DeletionOp delete = 2;
    CreationOp create = 3;
    ExecutionOp execute = 4;
  }
}

// ValueChangeOp to modify the balance and nonce of an account in global state
// account : Address of the account to be modified
// value   : The modified account balance
// changes : Number of times an account is modified; required to update the
//           account nonce accordingly
message ValueChangeOp {
  bytes account = 1; // hex buffer as bytes
  bytes value = 2; // bigint as bytes
  uint32 changes = 3; // number as bytes
}

// DeletionOp to delete an existing account in the global state
// account : Address of the account to be deleted
message DeletionOp {
  bytes account = 1; // hex buffer
}

// CreationOp to create a new account in the global state
// account : Address of the an account to be created
// value   : Balance of the new account
// code    : Code to initialize the account with
// storage : A list of key, value pairs corresponding to the account storage
message CreationOp {
  bytes account = 1; // hex buffer as bytes
  bytes value = 2; // bigint as bytes
  bytes code = 3; // hex buffer as bytes
  repeated StorageInsertion storage = 4;
}

// ExecutionOp to modify an accounts balance and storage in the global state 
// resulting from a contract execution
// account : Address of the account
// value   : Updated balance
// storage : Updated storage entries
message ExecutionOp {
  bytes account = 1; // hex buffer as bytes
  bytes value = 2; // bigint as bytes
  repeated StorageUpdate storage = 3;
}

// StorageUpdate op to update a global state account's internal storgage
// update : An account's storage update (to insert new/modified entries or
//          to delete existing entries)
message StorageUpdate {
  oneof updates {
    StorageInsertion inserts = 1;
    StorageDeletion deletes = 2;
  }
}

// StorageInsertion op to insert a new storgae entry into a global state account
// key, value : An account's storage entry to be inserted or updated
message StorageInsertion {
  bytes key = 1; // bigint as bytes
  bytes value = 2; // bigint as bytes
}

// StorageDeletion op to delete an account's internal storage entry
// key : An entry in an account's storage to be deleted
message StorageDeletion {
  bytes key = 1; // bigint as bytes
}
