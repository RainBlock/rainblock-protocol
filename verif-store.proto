syntax = "proto3";

package verifierToStorageProto;

service get {
  rpc get (getInputMsg) returns (getReturnMsg) {};
  rpc getBlockByNumber (getBlockByNumberInputMsg) returns (blockMsg) {};
  rpc getBlockByHash (getBlockByHashInputMsg) returns (blockMsg) {};
  rpc getRecentMiner (getRecentMinerInputMsg) returns (getRecentMinerReturnMsg) {};
  rpc verifyWitness (verifyWitnessInputMsg) returns (verifyWitnessReturnMsg) {};
}

/*
** Serialized Block
*/
message blockMsg {
  bytes block_data = 1;
}

/*
** get (key, root): Returns the value of the key at the "root"
** If root is not specified returns the value at the latest "root".
*/
message getInputMsg {
  bytes key = 1;
  bytes root = 2;
}

/*
** get (key) => {value, proof}
** Value is a byte[] and proof is also an RLP serialized byte[]
*/
message getReturnMsg {
  bytes value = 1;
  bytes proof = 2;
}

/*
** getBlockByNumber (number) => Block
** getBlockByNumber gets a number as an input and
** returns an RLP serialized byte[] Block
*/
message getBlockByNumberInputMsg {
  int64 blockNumber = 1;
}

/*
** getBlockByHash (blockHash) => Block
** getBlockByHash receives a hash as an input and
** returns an RLP serialized byte[] Block
*/
message getBlockByHashInputMsg {
  bytes blockHash = 1;
}

/*
** getRecentMiner is an empty message which returns a
** message with the coinbase of the most recent block
*/
message getRecentMinerInputMsg {
}

message getRecentMinerReturnMsg {
  bytes coinBase = 1;
}

/*
** verifyWitness (root, key, witness) => Boolean
** root, key are both byte[]
** witness is a byte[] of 
** RLP serialized stack of RLP serialized nodes
*/
message verifyWitnessInputMsg {
  bytes root = 1;
  bytes key = 2;
  bytes witness = 3;
}

message verifyWitnessReturnMsg {
  bool result = 1;
}
